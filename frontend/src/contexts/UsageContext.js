import React, { createContext, useContext, useState, useEffect, useCallback, useMemo } from 'react';
import api from '../utils/axiosConfig';
import { isLocalEnv, logger } from '../utils/environment';
import { mockUsageData, mockApiCall } from '../utils/mockData';

const UsageContext = createContext();

const CACHE_DURATION = 60000; // 1ÂàÜÈñì„Ç≠„É£„ÉÉ„Ç∑„É•

export const UsageProvider = ({ children, storeId }) => {
    const [usageData, setUsageData] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [lastFetchTime, setLastFetchTime] = useState(null);

    const fetchUsageData = useCallback(async (forceRefresh = false) => {
        // „Ç≠„É£„ÉÉ„Ç∑„É•„ÉÅ„Çß„ÉÉ„ÇØ
        if (!forceRefresh && lastFetchTime && Date.now() - lastFetchTime < CACHE_DURATION && usageData) {
            return usageData;
        }

        // Êó¢„Å´„É≠„Éº„Éá„Ç£„É≥„Ç∞‰∏≠„ÅÆÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
        if (loading) {
            return usageData;
        }

        if (!storeId) {
            return null;
        }

        setLoading(true);
        setError(null);

        try {
            let data;

            if (isLocalEnv()) {
                // „É≠„Éº„Ç´„É´Áí∞Â¢É„Åß„ÅØ„É¢„ÉÉ„ÇØ„Éá„Éº„Çø„Çí‰ΩøÁî®
                logger.log('üè† ‰ΩøÁî®Èáè„Éá„Éº„ÇøÔºö„É¢„ÉÉ„ÇØ„Éá„Éº„Çø„Çí‰ΩøÁî®');
                const response = await mockApiCall(mockUsageData);
                data = response.data;
            } else {
                // Êú¨Áï™Áí∞Â¢É„Åß„ÅØÂÆüÈöõ„ÅÆAPI„ÇíÂëº„Å≥Âá∫„Åó
                const response = await api.get(`/api/usage/status?store_id=${storeId}`);
                data = response.data;
            }
            
            setUsageData(data);
            setLastFetchTime(Date.now());
            
            return data;
        } catch (err) {
            logger.error('‰ΩøÁî®Èáè„Éá„Éº„Çø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü:', err);
            setError(err);
            return null;
        } finally {
            setLoading(false);
        }
    }, [storeId, loading, lastFetchTime, usageData]);

    // storeId„ÅåÂ§âÊõ¥„Åï„Çå„Åü„Çâ„Ç≠„É£„ÉÉ„Ç∑„É•„Çí„ÇØ„É™„Ç¢
    useEffect(() => {
        setUsageData(null);
        setLastFetchTime(null);
        setError(null);
    }, [storeId]);

    // ÂàùÂõû„ÅÆ„Éá„Éº„ÇøÂèñÂæó
    useEffect(() => {
        if (storeId && !usageData) {
            fetchUsageData();
        }
    }, [storeId, usageData, fetchUsageData]);

    // „Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÂÄ§„Çí„É°„É¢Âåñ„Åó„Å¶‰∏çË¶Å„Å™ÂÜç„É¨„É≥„ÉÄ„É™„É≥„Ç∞„ÇíÈò≤„Åê
    const value = useMemo(() => ({
        usageData,
        loading,
        error,
        refetch: () => fetchUsageData(true),
        getCachedData: () => fetchUsageData(false)
    }), [usageData, loading, error, fetchUsageData]);

    return (
        <UsageContext.Provider value={value}>
            {children}
        </UsageContext.Provider>
    );
};

export const useUsage = () => {
    const context = useContext(UsageContext);
    if (!context) {
        throw new Error('useUsage must be used within a UsageProvider');
    }
    return context;
};